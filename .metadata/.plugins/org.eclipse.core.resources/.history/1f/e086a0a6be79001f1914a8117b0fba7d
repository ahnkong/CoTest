package Level3;

import java.util.Arrays;

public class 등굣길_DP {
    
    public static void main(String[] args) {
        
        int n = 3;    // 세로 크기 (행 수)
        int m = 4;    // 가로 크기 (열 수)
        
        int[][] map = new int[n + 1][m + 1]; // 지도 배열
        long MOD = 1000000007;               // 큰 수 처리를 위한 MOD 값
        int[][] puddles = {{2, 2}};          // 물웅덩이 위치
        
        // 1. 물웅덩이 위치를 -1로 설정
        for (int[] puddle : puddles) {
            int row = puddle[1]; // row는 puddles 배열의 두 번째 값
            int col = puddle[0]; // col은 puddles 배열의 첫 번째 값
            map[row][col] = -1;  // 물웅덩이 위치를 -1로 표시
        }
        
        // 2. 시작점 초기화 (1,1에서 시작)
        map[1][1] = 1;

        // 3. 첫 번째 행 초기화 (왼쪽에서만 경로를 받아올 수 있음)
        for (int j = 2; j <= m; j++) {
            if (map[1][j] == -1) {
                map[1][j] = 0; // 웅덩이인 경우 경로를 0으로 설정
            } else {
                map[1][j] = map[1][j - 1]; // 왼쪽에서만 경로를 받아옴
            }
        }

        // 4. 첫 번째 열 초기화 (위쪽에서만 경로를 받아올 수 있음)
        for (int i = 2; i <= n; i++) {
            if (map[i][1] == -1) {
                map[i][1] = 0; // 웅덩이인 경우 경로를 0으로 설정
            } else {
                map[i][1] = map[i - 1][1]; // 위쪽에서만 경로를 받아옴
            }
        }

        // 5. 나머지 경로 계산 (동적 프로그래밍)
        for (int i = 2; i <= n; i++) {
            for (int j = 2; j <= m; j++) {
                
                // 물웅덩이는 경로 수를 0으로 설정
                if (map[i][j] == -1) {
                    map[i][j] = 0;
                } else {
                    // 위쪽 칸에서 오는 경로 더하기
                    if (map[i - 1][j] != -1) {
                        map[i][j] += map[i - 1][j];
                    }
                    // 왼쪽 칸에서 오는 경로 더하기
                    if (map[i][j - 1] != -1) {
                        map[i][j] += map[i][j - 1];
                    }
                    // MOD 연산 적용 (큰 수 방지)
                    map[i][j] %= MOD;
                }
            }
        }

        // 6. 결과 출력 (학교까지 갈 수 있는 최단 경로의 수)
        System.out.println("학교까지 갈 수 있는 최단 경로의 수: " + map[n][m]);

        // 디버깅용으로 최종 지도 상태 출력
        for (int[] row : map) {
            System.out.println(Arrays.toString(row));
        }
    }
}
