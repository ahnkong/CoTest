package level1;

import java.util.HashSet;
import java.util.Set;

public class 폰켓몬class구현 {
    public static void main(String[] args) {
        // Test case 1
        int[] nums1 = {3, 1, 2, 3};
        PokemonPick select1 = new PokemonPick(nums1);
        System.out.println(select1.getTypes()); // 결과는 2
        
//        // Test case 2
//        int[] nums2 = {3, 3, 3, 2, 2, 4};
//        PokemonPick select2 = new PokemonPick(nums2);
//        System.out.println(select2.getTypes()); // 결과는 3
//        
//        // Test case 3
//        int[] nums3 = {3, 3, 3, 2, 2, 2};
//        PokemonPick select3 = new PokemonPick(nums3);
//        System.out.println(select3.getTypes()); // 결과는 2
    }
}

//객체 생성
class PokemonPick {
    private int[] nums;
    private int maxTypes;

    // 생성자
    public PokemonPick(int[] nums) {
        this.nums = nums;
        this.maxTypes = calculateTypes(); // nums배열에서 한번 연산된 후 maxtypes를 결정할 수 있댜
    }
    
    
    public int[] getNums() {
		return nums;
	}



	public void setNums(int[] nums) {
		this.nums = nums;
	}



	public int getMaxTypes() {
		return maxTypes;
	}



	public void setMaxTypes(int maxTypes) {
		this.maxTypes = maxTypes;
	}



	private int calculateTypes() {
        // N/2 마리의 폰켓몬을 가져갈 수 있음
        int pick = nums.length / 2;

        // Set을 사용해 중복된 폰켓몬 종류를 제거
        Set<Integer> uniquePokemon = new HashSet<>();
        for (int num : nums) {
            uniquePokemon.add(num);
        }

        // 고를 수 있는 폰켓몬 종류의 최댓값은
        // 종류의 개수와 N/2 중에서 더 작은 값이 됨
        return Math.min(uniquePokemon.size(), pick);
    }
}
